# -*- coding: utf-8 -*-
"""EDA for ARMD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TWvnGEM_JLDMoUE_nH1yQc5lD2tJ1UUy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import warnings
warnings.filterwarnings("ignore")

drive.mount('/content/drive')
folder_path = '/content/drive/MyDrive/DS/'

# ======================================================================
# E D A   F O R   A R M D   E . C O L I   D A T A S E T
# ----------------------------------------------------------------------
# Author: Mustafain
# Purpose:
#   We have several antibiotic-specific datasets (one file per antibiotic)
#   Example filenames: 'Gentamicin_train_data.csv', 'Ampicillin_train_data.csv', etc.
#   Each file contains clinical + microbiological features, and one target column
#   which indicates whether the antibiotic was Susceptible (1) or Resistant (2).#
# Goal:
#   For EACH dataset:
#     - Load and inspect its shape, data types, and missing values
#     - Summarize numeric columns (min, mean, max)
#     - Check resistance imbalance (counts of 1 vs 2)
#     - Plot key visuals (histogram, bar chart, correlation)
# ======================================================================


# Define folder path
folder_path = '/content/drive/MyDrive/DS'

# Antibiotics
antibiotics = [
    'Gentamicin', 'Trimethoprim_Sulfamethoxazole', 'Ciprofloxacin',
    'Ampicillin', 'Cefazolin', 'Nitrofurantoin',
    'Piperacillin_Tazobactam', 'Levofloxacin', 'Ceftriaxone'
]

# Initialize summary list
imbalance_summary = []

# Loop through all antibiotic datasets
for at in antibiotics:
    print("\n========================================================")
    print(f"=== EDA for {at} ===")
    print("========================================================")

    # Load dataset
    file_path = f"{folder_path}/{at}_train_data.csv"
    df = pd.read_csv(file_path)
    df = df.drop(columns=["anon_id"])
    print("Shape:", df.shape)

    target = df[at]

    # Count values
    counts = target.value_counts().sort_index()
    imbalance_summary.append({
        'Antibiotic': at.replace('_', '/'),
        'Susceptible (1)': counts.get(1.0, 0),
        'Resistant (2)': counts.get(2.0, 0),
        'Total': len(target),
        'Resistance Rate (%)': round(100 * counts.get(2.0, 0) / len(target), 2)
    })

# Create final summary table
imbalance_df = pd.DataFrame(imbalance_summary)
imbalance_df = imbalance_df.sort_values(by='Resistance Rate (%)', ascending=False)

print("\n=== Resistance Imbalance Summary Across All Datasets ===")
print(imbalance_df.to_string(index=False))

# Histogram of age
plt.figure(figsize=(6, 4))
sns.histplot(df['age'], bins=30, kde=True)
plt.title("Age Distribution")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

# Reshape the DataFrame for grouped barplot
melted_df = imbalance_df.melt(
    id_vars='Antibiotic',
    value_vars=['Susceptible (1)', 'Resistant (2)'],
    var_name='Class',
    value_name='Count'
)

# Sort antibiotics by resistance rate for better readability
order = imbalance_df.sort_values('Resistance Rate (%)', ascending=False)['Antibiotic']

# Plot
plt.figure(figsize=(12, 6))
sns.barplot(data=melted_df, x='Antibiotic', y='Count', hue='Class', order=order)
plt.title("Resistance vs Susceptibility Across Antibiotics")
plt.xlabel("Antibiotic")
plt.ylabel("Number of Cases")
plt.xticks(rotation=45, ha='right')
plt.legend(title='Class')
plt.tight_layout()
plt.show()

# Correlation heatmap foe features
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), cmap="coolwarm", center=0, annot=False)
plt.title("Feature Correlation Heatmap")
plt.tight_layout()
plt.show()

antibiotic_cols = [
    'Gentamicin', 'Trimethoprim_Sulfamethoxazole', 'Ciprofloxacin',
    'Ampicillin', 'Cefazolin', 'Nitrofurantoin',
    'Piperacillin_Tazobactam', 'Levofloxacin', 'Ceftriaxone'
]

all_data = []
for at in antibiotic_cols:
    file_path = f"{folder_path}/{at}_train_data.csv"
    df_at = pd.read_csv(file_path)
    df_at = df_at.drop(columns=["anon_id"])
    # Add a column to indicate the antibiotic
    df_at['Antibiotic'] = at
    all_data.append(df_at)

# Concatenate all dataframes
df_combined = pd.concat(all_data, ignore_index=True)

plt.figure(figsize=(12, 6))
for col in antibiotic_cols:
    # Filter the combined dataframe for the specific antibiotic
    df_filtered = df_combined[df_combined['Antibiotic'] == col]
    # Calculate yearly resistance trend
    yearly_trend = df_filtered.groupby('Year')[col].apply(lambda x: (x == 2.0).mean() * 100)
    plt.plot(yearly_trend.index, yearly_trend.values, label=col)

plt.title("Antibiotic Resistance Trends Over Years")
plt.xlabel("Year")
plt.ylabel("Resistance Rate (%)")
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Filter only the target resistance columns
resistance_df = pd.DataFrame()

for at in antibiotic_cols:
    file_path = f"{folder_path}/{at}_train_data.csv"
    df_at = pd.read_csv(file_path)
    df_at = df_at.drop(columns=["anon_id"])
    resistance_df[at] = df_at[at].map({1.0: 0, 2.0: 1})  # 1 = resistant, 0 = susceptible

resistance_df = resistance_df.dropna()
corr_matrix = resistance_df.corr()

# Plot heatmap for co-resistance
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap="Reds", linewidths=0.5)
plt.title("Co-resistance Correlation Between Antibiotics")
plt.tight_layout()
plt.show()

all_data = []
for at in antibiotic_cols:
    file_path = f"{folder_path}/{at}_train_data.csv"
    df_at = pd.read_csv(file_path)
    df_at = df_at.drop(columns=["anon_id"])
    df_at['Antibiotic'] = at
    df_at['Resistant'] = df_at[at] == 2.0  # Create binary resistant column
    all_data.append(df_at)

df_combined = pd.concat(all_data, ignore_index=True)

# Filter only resistant rows
resistant_cases = df_combined[df_combined['Resistant']]

# Group by ward type columns
ward_counts = resistant_cases[['hosp_ward_OP', 'hosp_ward_ER', 'hosp_ward_ICU']].sum()

# Plot pie chart of resistance acquired from hospiatal wards
plt.figure(figsize=(7, 7))
plt.pie(ward_counts, labels=ward_counts.index, autopct='%1.1f%%', startangle=140)
plt.title("Distribution of Resistant E. coli Cases by Hospital Ward Type")
plt.axis('equal')  # Equal aspect ratio makes the pie circular
plt.tight_layout()
plt.show()