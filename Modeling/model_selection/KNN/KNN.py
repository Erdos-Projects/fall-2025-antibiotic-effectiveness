# -*- coding: utf-8 -*-
#"""KNN.ipynb
#
#Automatically generated by Colab.#
#
#Original file is located at
#    https://colab.research.google.com/drive/1qoRn3Oj-rJ4yf5sTdC-FZk26JDPvoUXu
#"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import StratifiedKFold, cross_validate
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    make_scorer
)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

from google.colab import drive
import warnings
warnings.filterwarnings("ignore")

drive.mount('/content/drive')
folder_path = '/content/drive/MyDrive/DS/'

#These are our Target Antibitoics
antibiotics = ['Gentamicin', 'Trimethoprim_Sulfamethoxazole', 'Ciprofloxacin',
                'Ampicillin', 'Cefazolin','Nitrofurantoin','Piperacillin_Tazobactam',
                'Levofloxacin', 'Ceftriaxone']

def false_negative_rate(y_true, y_pred):
    fnr = 1 - recall_score(y_true, y_pred)
    return fnr

fnr_scorer = make_scorer(false_negative_rate, greater_is_better=False)
precision_scorer = make_scorer(precision_score, zero_division=0)

scoring = {
    'accuracy': 'accuracy',
    'f1': 'f1',
    'roc_auc': 'roc_auc',
    'precision': 'precision',
    'recall': 'recall',
    'fnr': fnr_scorer
}

n_randstat = 312
kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=n_randstat)

acc_scores = []
fnr_scores = []

for at in antibiotics:
  df = pd.read_csv(f'{folder_path}/{at}_train_data.csv')
  print(f'\n=== {at} ===')
  print('Shape:', df.shape)

  X = df.drop(columns=[at])
  y = (df[at] - 1).astype(int)

  knn = Pipeline([
        ('scaler', StandardScaler()),
        ('clf', KNeighborsClassifier(n_neighbors=3))
  ])
  results = cross_validate(knn, X, y, cv=kf, scoring=scoring)

  for metric in scoring.keys():
      mean_score = np.mean(results['test_' + metric])
      print(f'{metric}: {mean_score:.3f}')

  acc_scores.append(np.mean(results['test_accuracy']))
  fnr_scores.append(np.mean(results['test_fnr']))

plt.figure(figsize=(10,4))
plt.bar(antibiotics, acc_scores, color='skyblue')
plt.xticks(rotation=45, ha='right')
plt.ylabel('Accuracy')
plt.title('KNN Accuracy per Antibiotic')
plt.tight_layout()
plt.show()

"""#Now im trying 5 neighbors"""

acc_scores = []
fnr_scores = []

for at in antibiotics:
  df = pd.read_csv(f'{folder_path}/{at}_train_data.csv')
  print(f'\n=== {at} ===')
  print('Shape:', df.shape)

  X = df.drop(columns=[at])
  y = (df[at] - 1).astype(int)

  knn = Pipeline([
        ('scaler', StandardScaler()),
        ('clf', KNeighborsClassifier(n_neighbors=5))
  ])
  results = cross_validate(knn, X, y, cv=kf, scoring=scoring)

  for metric in scoring.keys():
      mean_score = np.mean(results['test_' + metric])
      print(f'{metric}: {mean_score:.3f}')

  acc_scores.append(np.mean(results['test_accuracy']))
  fnr_scores.append(np.mean(results['test_fnr']))
